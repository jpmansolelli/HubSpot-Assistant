// Configura√ß√£o
const N8N_WEBHOOK_URL = 'https://settled-saving-dog.ngrok-free.app/webhook/hubspot-assistant';

// Fun√ß√£o principal para enviar pergunta
async function sendQuestion() {
    const input = document.getElementById('queryInput');
    const chatContainer = document.getElementById('chatContainer');
    const sendButton = document.getElementById('sendButton');
    const typingIndicator = document.getElementById('typingIndicator');
    
    const question = input.value.trim();
    
    if (!question) {
        input.focus();
        return;
    }
    
    // Adicionar mensagem do usu√°rio ao chat
    addMessage(question, 'user');
    
    // Limpar input e desabilitar controles
    input.value = '';
    sendButton.disabled = true;
    input.disabled = true;
    
    // Mostrar indicador de digita√ß√£o
    typingIndicator.classList.add('show');
    
    try {
        // Fazer requisi√ß√£o para o webhook N8N
        const response = await fetch(N8N_WEBHOOK_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'ngrok-skip-browser-warning': 'true'
            },
            body: JSON.stringify({
                question: question,
                timestamp: new Date().toISOString(),
                source: 'hubspot-assistant-web'
            })
        });
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
        }
        
        const data = await response.json();
        
        // Esconder indicador de digita√ß√£o
        typingIndicator.classList.remove('show');
        
        // Adicionar resposta do assistente
        const botResponse = data.response || data.message || data.answer || 'Desculpe, n√£o consegui processar sua pergunta.';
        addMessage(botResponse, 'bot');
        
        // Se houver metadados, adicionar
        if (data.metadata) {
            addMetadata(data.metadata);
        }
        
    } catch (error) {
        console.error('Erro ao comunicar com N8N:', error);
        
        // Esconder indicador de digita√ß√£o
        typingIndicator.classList.remove('show');
        
        // Mostrar mensagem de erro amig√°vel
        let errorMessage = 'Desculpe, ocorreu um erro ao processar sua pergunta.';
        
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            errorMessage = 'N√£o foi poss√≠vel conectar ao servidor. Verifique sua conex√£o.';
        } else if (error.message.includes('CORS')) {
            errorMessage = 'Erro de configura√ß√£o. Por favor, contate o administrador.';
        }
        
        addMessage(errorMessage, 'bot', 'error');
        
    } finally {
        // Reabilitar controles
        sendButton.disabled = false;
        input.disabled = false;
        input.focus();
    }
}

// Fun√ß√£o para adicionar mensagem ao chat
function addMessage(text, sender, type = 'normal') {
    const chatContainer = document.getElementById('chatContainer');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    
    // Avatar
    const avatar = document.createElement('div');
    avatar.className = 'message-avatar';
    
    if (sender === 'bot') {
        avatar.style.background = type === 'error' ? '#f56565' : '#4299e1';
        avatar.textContent = 'ü§ñ';
    } else {
        avatar.style.background = '#9f7aea';
        avatar.textContent = 'üë§';
    }
    
    // Conte√∫do da mensagem
    const content = document.createElement('div');
    content.className = 'message-content';
    
    if (type === 'error') {
        content.style.background = '#fed7e2';
        content.style.color = '#9b2c2c';
        content.style.borderLeft = '4px solid #f56565';
    }
    
    // Suporte b√°sico a markdown/formata√ß√£o
    const formattedText = formatMessage(text);
    content.innerHTML = formattedText;
    
    messageDiv.appendChild(avatar);
    messageDiv.appendChild(content);
    
    chatContainer.appendChild(messageDiv);
    
    // Auto-scroll para a √∫ltima mensagem
    chatContainer.scrollTop = chatContainer.scrollHeight;
    
    // Anima√ß√£o suave
    messageDiv.style.opacity = '0';
    messageDiv.style.transform = 'translateY(10px)';
    
    setTimeout(() => {
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
        messageDiv.style.transition = 'all 0.3s ease';
    }, 10);
}

// Fun√ß√£o para formatar mensagens b√°sicas
function formatMessage(text) {
    return text
        .replace(/\n/g, '<br>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code style="background: #f1f5f9; padding: 2px 4px; border-radius: 3px; font-family: monospace;">$1</code>');
}

// Fun√ß√£o para adicionar metadados
function addMetadata(metadata) {
    const chatContainer = document.getElementById('chatContainer');
    const lastMessage = chatContainer.lastElementChild;
    
    if (lastMessage && lastMessage.classList.contains('bot')) {
        const metadataDiv = document.createElement('div');
        metadataDiv.className = 'metadata';
        metadataDiv.innerHTML = `
            <small>
                ${metadata.source ? `Fonte: ${metadata.source}` : ''}
                ${metadata.timestamp ? ` ‚Ä¢ ${new Date(metadata.timestamp).toLocaleTimeString('pt-BR')}` : ''}
                ${metadata.confidence ? ` ‚Ä¢ Confian√ßa: ${Math.round(metadata.confidence * 100)}%` : ''}
            </small>
        `;
        
        lastMessage.querySelector('.message-content').appendChild(metadataDiv);
    }
}

// Fun√ß√£o para adicionar exemplos de perguntas
function addExampleButtons() {
    const examples = [
        "Como autenticar na API do HubSpot?",
        "Quais s√£o os endpoints principais?",
        "Como criar um webhook no HubSpot?",
        "Como buscar contatos via API?",
        "Rate limits da API do HubSpot",
        "Como atualizar propriedades de contato?"
    ];
    
    const examplesContainer = document.createElement('div');
    examplesContainer.className = 'examples';
    examplesContainer.innerHTML = `
        <div class="examples-title">üí° Perguntas frequentes:</div>
        <div class="example-buttons">
            ${examples.map(example => 
                `<button class="example-button" onclick="fillInput('${example}')">${example}</button>`
            ).join('')}
        </div>
    `;
    
    const container = document.querySelector('.container');
    container.appendChild(examplesContainer);
}

// Fun√ß√£o para preencher input com exemplo
function fillInput(text) {
    const input = document.getElementById('queryInput');
    input.value = text;
    input.focus();
}

// Fun√ß√£o para limpar chat
function clearChat() {
    const chatContainer = document.getElementById('chatContainer');
    chatContainer.innerHTML = `
        <div class="message bot">
            <div class="message-avatar">ü§ñ</div>
            <div class="message-content">
                Ol√°! Sou seu assistente especializado em HubSpot API. Posso ajudar com d√∫vidas sobre integra√ß√µes, endpoints, autentica√ß√£o, webhooks e muito mais. Como posso ajud√°-lo hoje?
            </div>
        </div>
    `;
}

// Fun√ß√£o para verificar status do N8N
async function checkN8NStatus() {
    try {
        const response = await fetch(N8N_WEBHOOK_URL.replace('/webhook/', '/healthz'), {
            method: 'GET',
            timeout: 5000
        });
        
        const statusIndicator = document.querySelector('.status-dot');
        if (response.ok) {
            statusIndicator.style.background = '#48bb78'; // Verde
        } else {
            statusIndicator.style.background = '#f56565'; // Vermelho
        }
    } catch (error) {
        const statusIndicator = document.querySelector('.status-dot');
        statusIndicator.style.background = '#ed8936'; // Laranja
    }
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    const input = document.getElementById('queryInput');
    const sendButton = document.getElementById('sendButton');
    
    // Enviar com Enter
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !sendButton.disabled && !input.disabled) {
            e.preventDefault();
            sendQuestion();
        }
    });
    
    // Controle do bot√£o enviar baseado no input
    input.addEventListener('input', function() {
        sendButton.disabled = this.value.trim() === '';
    });
    
    // Adicionar bot√µes de exemplo
    addExampleButtons();
    
    // Verificar status inicial
    // checkN8NStatus();
    
    // Verificar status periodicamente (opcional)
    // setInterval(checkN8NStatus, 30000); // A cada 30 segundos
    
    // Focus inicial no input
    input.focus();
    
    // Adicionar bot√£o de limpar chat
    const header = document.querySelector('.header');
    const clearButton = document.createElement('button');
    clearButton.innerHTML = 'üóëÔ∏è Limpar Chat';
    clearButton.style.cssText = `
        background: #f7fafc;
        border: 1px solid #e2e8f0;
        border-radius: 20px;
        padding: 6px 12px;
        font-size: 0.8rem;
        color: #4a5568;
        cursor: pointer;
        margin-top: 10px;
        transition: all 0.3s ease;
    `;
    
    clearButton.addEventListener('click', clearChat);
    clearButton.addEventListener('mouseenter', function() {
        this.style.background = '#edf2f7';
        this.style.borderColor = '#cbd5e0';
    });
    clearButton.addEventListener('mouseleave', function() {
        this.style.background = '#f7fafc';
        this.style.borderColor = '#e2e8f0';
    });
    
    header.appendChild(clearButton);
});

// Fun√ß√£o para debug (remover em produ√ß√£o)
function debugN8N() {
    console.log('Webhook URL:', N8N_WEBHOOK_URL);
    console.log('User Agent:', navigator.userAgent);
    console.log('Location:', window.location.href);
}

// Exportar fun√ß√µes para uso global
window.sendQuestion = sendQuestion;
window.fillInput = fillInput;
window.clearChat = clearChat;
